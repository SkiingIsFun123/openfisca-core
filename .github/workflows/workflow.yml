name: OpenFisca Core

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:
  build:
    uses: ./.github/workflows/build.yml

  test:
    needs: [build]
    uses: ./.github/workflows/test.yml
    secrets:
      github-token: ${{ secrets.GITHUB_TOKEN }}

  # lint-files:
  #   runs-on: ubuntu-latest
  #   needs: [ build ]
  #   env:
  #     TERM: xterm-256color
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Fetch all the tags
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7.12
  #     - name: Cache build
  #       id: restore-build
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ env.pythonLocation }}
  #         key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}
  #     - name: Run linters
  #       run: make lint

  # check-version:
  #   runs-on: ubuntu-latest
  #   needs: [ test-core, test-country-template, test-extension-template, check-numpy, test-docs, lint-files ] # Last job to run
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Fetch all the tags
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7.12
  #     - name: Check version number has been properly updated
  #       run: "${GITHUB_WORKSPACE}/.github/is-version-number-acceptable.sh"

  # # GitHub Actions does not have a halt job option, to stop from deploying if no functional changes were found.
  # # We build a separate job to substitute the halt option.
  # # The `deploy` job is dependent on the output of the `check-for-functional-changes`job.
  # check-for-functional-changes:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master' # Only triggered for the `master` branch
  #   needs: [ check-version ]
  #   outputs:
  #     status: ${{ steps.stop-early.outputs.status }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Fetch all the tags
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7.12
  #     - id: stop-early
  #       run: if "${GITHUB_WORKSPACE}/.github/has-functional-changes.sh" ; then echo "::set-output name=status::success" ; fi # The `check-for-functional-changes` job should always succeed regardless of the `has-functional-changes` script's exit code. Consequently, we do not use that exit code to trigger deploy, but rather a dedicated output variable `status`, to avoid a job failure if the exit code is different from 0. Conversely, if the job fails the entire workflow would be marked as `failed` which is disturbing for contributors.

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [ check-for-functional-changes ]
  #   if: needs.check-for-functional-changes.outputs.status == 'success'
  #   env:
  #     PYPI_USERNAME: openfisca-bot
  #     PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     CIRCLE_TOKEN: ${{ secrets.CIRCLECI_V1_OPENFISCADOC_TOKEN }} # Personal API token created in CircleCI to grant full read and write permissions
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Fetch all the tags
  #     - name: Set up Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7.12
  #     - name: Cache build
  #       id: restore-build
  #       uses: actions/cache@v2
  #       with:
  #         path: ${{ env.pythonLocation }}
  #         key: build-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}
  #     - name: Cache release
  #       id: restore-release
  #       uses: actions/cache@v2
  #       with:
  #         path: dist
  #         key: release-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ github.sha }}
  #     - name: Upload a Python package to PyPi
  #       run: twine upload dist/* --username $PYPI_USERNAME --password $PYPI_PASSWORD
  #     - name: Publish a git tag
  #       run: "${GITHUB_WORKSPACE}/.github/publish-git-tag.sh"
  #     - name: Update doc
  #       run: |
  #         curl -X POST --header "Content-Type: application/json" -d '{"branch":"master"}' https://circleci.com/api/v1.1/project/github/openfisca/openfisca-doc/build?circle-token=${{ secrets.CIRCLECI_V1_OPENFISCADOC_TOKEN }}

  # publish-to-conda:
  #   runs-on: "ubuntu-latest"
  #   needs: [ deploy ]
  #   strategy:
  #     fail-fast: false
  #   steps:
  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         auto-update-conda: true
  #         python-version: 3.7.12
  #         channels: conda-forge
  #         activate-environment: true
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Fetch all the tags
  #     - name: Update meta.yaml
  #       run: |
  #         python3 -m pip install requests argparse
  #         # Sleep to allow PyPi to update its API
  #         sleep 60
  #         python3 .github/get_pypi_info.py -p OpenFisca-Core
  #     - name: Conda Config
  #       run: |
  #         conda install conda-build anaconda-client
  #         conda info
  #         conda config --set anaconda_upload yes
  #     - name: Conda build
  #       run: conda build -c conda-forge --token ${{ secrets.ANACONDA_TOKEN }} --user openfisca .conda

  # test-on-windows:
  #   runs-on: "windows-latest"
  #   needs: [ publish-to-conda ]
  #   steps:
  #     - uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         auto-update-conda: true
  #         python-version: "3.7.9"  # 3.7.12 don't exist on GHA Windows https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
  #         channels: conda-forge
  #         activate-environment: true
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0 # Fetch all the tags
  #     - name: Install with conda
  #       run: conda install -c openfisca openfisca-core
  #     - name: Test openfisca
  #       run: openfisca --help
